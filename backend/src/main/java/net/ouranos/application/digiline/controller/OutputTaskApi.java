/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package net.ouranos.application.digiline.controller;

import net.ouranos.domain.digiline.model.Error;
import net.ouranos.domain.digiline.model.OutputTask;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-12T16:17:29.389688600+09:00[Asia/Tokyo]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "INDX_0018.出力ファイル取得業務", description = "the INDX_0018.出力ファイル取得業務 API")
public interface OutputTaskApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /output-task : GOF_0010.ファイル作成状況確認
     * 取得依頼した情報がファイルに出力されているか確認し、出力が完了している場合は出力先のURLを取得する
     *
     * @param taskId タスクID (required)
     * @return 取得成功 (status code 200)
     *         or リクエスト不正 (status code 400)
     *         or アクセス権限不正 (status code 403)
     *         or 対象データなし (status code 404)
     *         or システムエラー (status code 500)
     *         or タイムアウトエラー (status code 504)
     */
    @Operation(
        operationId = "outputTaskGet",
        summary = "GOF_0010.ファイル作成状況確認",
        description = "取得依頼した情報がファイルに出力されているか確認し、出力が完了している場合は出力先のURLを取得する",
        tags = { "INDX_0018.出力ファイル取得業務" }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/output-task",
        produces = { "application/json" }
    )
    
    ResponseEntity<Object> outputTaskGet(@Parameter(name = "X-Tracking", description = "トラッキングID", in = ParameterIn.HEADER) @RequestHeader(value = "X-Tracking", required = false) UUID xTracking,
        @NotNull @Parameter(name = "taskId", description = "タスクID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskId", required = true) String taskId
    ); 

}
