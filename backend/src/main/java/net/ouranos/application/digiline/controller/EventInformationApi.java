/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package net.ouranos.application.digiline.controller;

import net.ouranos.domain.digiline.model.Error;
import net.ouranos.domain.digiline.model.EventInformation;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-12T16:17:29.389688600+09:00[Asia/Tokyo]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "INDX_0012.イベント情報照会業務", description = "the INDX_0012.イベント情報照会業務 API")
public interface EventInformationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /event-information : GEI_0010.イベント情報取得
     * 指定した範囲内に存在するイベント情報を取得する。
     *
     * @param sids 空間ID（複数指定可能） (required)
     * @param infraCompanyIds インフラ事業者ID（複数指定可能） (optional)
     * @param returnZoomLevel 返却ズームレベル (optional)
     * @param updateDate 更新日時 (optional)
     * @return 取得成功 (status code 200)
     *         or リクエスト不正 (status code 400)
     *         or アクセス権限不正 (status code 403)
     *         or システムエラー (status code 500)
     *         or タイムアウトエラー (status code 504)
     */
    @Operation(
        operationId = "eventInformationGet",
        summary = "GEI_0010.イベント情報取得",
        description = "指定した範囲内に存在するイベント情報を取得する。",
        tags = { "INDX_0012.イベント情報照会業務" }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/event-information",
        produces = { "application/json" }
    )
    
    ResponseEntity<Object> eventInformationGet(@Parameter(name = "X-Tracking", description = "トラッキングID", in = ParameterIn.HEADER) @RequestHeader(value = "X-Tracking", required = false) UUID xTracking,
        @NotNull @Parameter(name = "sids", description = "空間ID（複数指定可能）", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "sids", required = true) List<String> sids,
        @Parameter(name = "infraCompanyIds", description = "インフラ事業者ID（複数指定可能）", in = ParameterIn.QUERY) @Valid @RequestParam(value = "infraCompanyIds", required = false) List<String> infraCompanyIds,
        @Parameter(name = "returnZoomLevel", description = "返却ズームレベル", in = ParameterIn.QUERY) @Valid @RequestParam(value = "returnZoomLevel", required = false) Integer returnZoomLevel,
        @Parameter(name = "updateDate", description = "更新日時", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updateDate", required = false) String updateDate
    ); 

}
